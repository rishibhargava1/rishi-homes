" General {{{

  let mapleader = ','
  filetype plugin indent on
  if !exists('g:syntax_on')
    syntax enable
  endif
  colorscheme such

" Spacing
  set autoindent
  set expandtab
  set linebreak
  set shiftwidth=2
  set tabstop=2
  set textwidth=90

" Editing
  set backspace=indent,eol,start
  set pastetoggle=<F2>
  set virtualedit=block

" Splits
  set splitbelow
  set splitright

" Searching
  set hlsearch
  set ignorecase
  set incsearch

" Random
  if exists('+colorcolumn')
    set colorcolumn=+1
  endif
  set encoding=utf-8
  set history=1000
  set lazyredraw
  set nowrap
  set number

" Key Timeouts
  set notimeout
  set ttimeout
  set ttimeoutlen=100

" Menu Completion
  set wildignorecase
  set wildignore+=*/build/*
  set wildignore+=*/.git/*
  set wildmenu
  set wildmode=list:longest,full

" Swap files
  set directory=$HOME/.vim/swap
  if !isdirectory(&directory)
    call mkdir(&directory, 'p')
  endif

" Persistent Undo
  if has('persistent_undo')
    set undodir=$HOME/.vim/undodir
    if !isdirectory(&undodir)
      call mkdir(&undodir, 'p')
    endif
    set undofile
  endif

" tmux
  if !$TMUX
    set t_ut=
  endif

" }}}

" Mappings {{{

" Clear search highlight
  nnoremap <silent> <Leader>, :nohlsearch<CR>

" Move searches to the center of the screen
  map N Nzz
  map n nzz

" Keep visual selecting after indenting a block
  vnoremap > >gv
  vnoremap < <gv

" Make split navigation a little easier
  nnoremap <C-J> <C-W><C-J>
  nnoremap <C-K> <C-W><C-K>
  nnoremap <C-L> <C-W><C-L>
  nnoremap <C-H> <C-W><C-H>

" Spellcheck
  nnoremap <silent> <Leader>s :setlocal spell!<CR>

" Replace the current search pattern
  nnoremap <expr> M ':%s/' . @/ . '//g<LEFT><LEFT>'

" Trim trailing whitespace
  nnoremap <silent> <Leader>j
        \ :let _s=@/ <Bar>
        \ :%s/\s\+$//e <Bar>
        \ :let @/=_s <Bar>
        \ :nohl <CR>

" Trim trailing whitespace and compress empty lines
  nnoremap <silent> <Leader>0
        \ :let _s=@/ <Bar>
        \ :%s/\s\+$//e <Bar>
        \ :%s/\n\{3,}/\r\r/e <Bar>
        \ :let @/=_s <Bar>
        \ :nohl <CR>

" Invoke grep on the current word
  nnoremap <silent> K
        \ :grep! '\b<C-R><C-W>\b' <CR>
        \ :cw <CR>

" Invoke grep on visual selection
  vnoremap <silent> K
        \ y
        \ :grep! '\b<C-R>"\b' <CR>
        \ :cw <CR>
        \ /<C-R>"<CR>

" Search for visually selected text
  vnoremap <silent> //
        \ :<C-U>
        \ let old_reg = getreg('"') <Bar> let old_regtype = getregtype('"') <CR>
        \ gvy
        \ /<C-R><C-R>=substitute(
        \ escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
        \ gV:call setreg('"', old_reg, old_regtype)<CR>

" }}}

" Whitespace {{{

  highlight ExtraWhitespace ctermbg=red
  match ExtraWhitespace /\s\+\%#\@<!$/
  augroup vimrc
    autocmd!
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red
  augroup END

" }}}

" statusline {{{

  set laststatus=2
  set statusline=%{&spell?'[Spell]\ ':''}
  set statusline+=%f
  set statusline+=\ %y\ %m

" }}}

" netrw {{{

  let g:netrw_altv = 1
  let g:netrw_banner = 0
  let g:netrw_browse_split = 4
  let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'
  let g:netrw_liststyle = 3
  let g:netrw_winsize = 50

  function! VexClose()
    let cur_win_nr = winnr()
    let target_nr = ( cur_win_nr == 1 ? winnr('#') : cur_win_nr )

    1wincmd w
    close
    unlet t:vex_buf_nr

    execute (target_nr - 1) . 'wincmd w'
  endfunction

  function! VexOpen()
    Vexplore
    let t:vex_buf_nr = bufnr('%')
    wincmd H

    execute 'vertical resize' . g:netrw_winsize
    set winfixwidth
  endfunction

  function! VexToggle()
    if exists('t:vex_buf_nr')
      call VexClose()
    else
      call VexOpen()
    endif
  endfunction

  nnoremap <silent> <Leader>v :call VexToggle()<CR>

" }}}

" man pages {{{

  if !empty(globpath(&runtimepath, 'ftplugin/man.vim'))
    runtime! ftplugin/man.vim
  endif

" }}}

" Extending matching {{{

  if !empty(globpath(&runtimepath, 'macros/matchit.vim'))
    runtime! macros/matchit.vim
  endif

" }}}

" grep {{{

  if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  endif

" }}}


" Open spec files {{{

  function! OpenSpec() abort
    let l:config = findfile('Config', '.;')
    if empty(l:config)
      return 0
    endif
    let l:root = fnamemodify(l:config, ':p:h')
    let l:file = fnamemodify(expand('%:p'), ':s?' . l:root . '??')

    if l:file !~ '^/lib/'
      return 0
    endif

    let l:spec = substitute(l:file, '/lib', l:root . '/spec', '')
    let l:spec = substitute(l:spec, '.rb', '_spec.rb', '')

    if !filereadable(l:spec)
      let l:dir = fnamemodify(l:spec, ':h')
      if !isdirectory(l:dir)
        call mkdir(l:dir, 'p')
      endif
    endif

    execute 'vsplit' l:spec
  endfunction

  nnoremap <silent> <C-T> :call OpenSpec()<CR>

" }}}

" Built-in Plugins {{{

  " Disable built-in plugins
  let g:loaded_getscript         = 1 " $VIMRUNTIME/autoload/getscript.vim
  let g:loaded_getscriptPlugin   = 1 " $VIMRUNTIME/plugin/getscriptPlugin.vim
  let g:loaded_gzip              = 1 " $VIMRUNTIME/plugin/gzip.vim
  let g:loaded_logipat           = 1 " $VIMRUNTIME/plugin/logiPat.vim
  let g:loaded_logiPat           = 1 " $VIMRUNTIME/plugin/logiPat.vim
  let g:loaded_rrhelper          = 1 " $VIMRUNTIME/plugin/rrhelper.vim
  let g:loaded_spellfile_plugin  = 1 " $VIMRUNTIME/plugin/spellfile.vim
  let g:loaded_sql_completion    = 1 " $VIMRUNTIME/autoload/sqlcomplete.vim
  let g:loaded_syntax_completion = 1 " $VIMRUNTIME/autoload/syntaxcomplete.vim

" }}}

" plugins {{{

  if $KSE ==# 'true'
    let g:vim_markdown_folding_disabled = 1

    let g:startify_bookmarks = [ {'v': '~/.vimrc'}, {'z': '~/.zshrc'} ]
    let g:startify_change_to_vcs_root = 1
    let g:startify_custom_indices = map(range(1,100), 'string(v:val)')
    let g:startify_enable_special = 0
    let g:startify_list_order = ['dir', 'files', 'bookmarks']
    let g:startify_relative_path = 1

    let g:ctrlp_map = '<Leader>t'
    let g:ctrlp_match_window = 'bottom,order:btt,max:30'

    let g:UltiSnipsSnippetDirectories = ['snips']
  endif

" }}}
